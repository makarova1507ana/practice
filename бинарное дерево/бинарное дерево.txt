
struct Elem {//сам элемент или узел дерева
    int number;
   int OwnerPointer;
    int OppPointer;
    char pointOfMatch[20];
    char  name[20];
    char nameOpponent[20];
    Elem* left, * right, * parent;//указатель на левую, правую ветку и родителя
};
class Tree
{
    Elem* root;//указатель на элемент
public:
    Tree()
    {
        root = NULL;
    }

    /*печать дерева с необходимого узла*/
    void print(Elem* Node) {
        if (Node != 0)
        {
            print(Node->left);//печать левой ветки через рекурсию
            cout << " this->"<<Node<<" name=" <<Node->number <<" parent="<<Node->parent<<" left="<<Node->left<<" right="<<Node->right<< endl;//печать самого узла
            print(Node->right);//печать правой ветки через рекурсию
        }
    }

    /*вставка узла*/
    void insert(Elem* z)
    {
        z->left = NULL;
        z->right = NULL;
        Elem* y = NULL;
        Elem* Node = root;/*текущий узел = корень*/
       
       /*Пока текущий узел не ссылкается на null*/
        while (Node != 0)
        {
            y = Node;
            if (z->number < Node->number)
                Node = Node->left;
            else
                Node = Node->right;
        }
        z->parent = y;//новый родитель

        /*Если родитель пустой, создаем корень. В правую ветку меньшие числа*/
        if (y == 0)
            root = z;
        else if   (z->number < y->number)
            y->left = z;
        else
            y->right = z;
            
    }
    
    bool find(int valueFind) {
		Elem* Node = root;
		while (Node != nullptr) {
			if (valueFind == Node->number) {
				cout << "Число нашли " << valueFind;
				return true;
			}
			if (valueFind < Node->number) {
				Node = Node->left;
			}
			else {
				Node = Node->right;
			}
		}
		cout << "Число не нашли " << valueFind;
		return false;
	}
    /*Elem* search(Elem* Node, int key)
    {
        while (Node != 0 && key!=Node->number)
        {
            if (key < Node->number)
            {
                Node = Node->left;
            }
            else
            {
                Node = Node->right;
            }
        }
        return Node;
    }*/
    Elem* next(Elem* Node)
    {
        Elem* y = 0;
        if (Node != 0)
        {
            if (Node->parent != 0)
            {
                y = Node->parent;
            }
            else
            {
                y = Node;
            }
           
            if (y != 0 && Node==y->right)
            {
                Node = y;
                y = y->parent;
            }
        else
        {
                y = y->right;
        }
        }
        return y;
    }

    void del(Elem* z = 0)
    {
        if (z != 0)
        {
            Elem* Node, * y;
            if (z->left == 0 && z->right == 0)
            {
                y= z;
               
            }
            else
            {
                y =next(z);
            }
            if (y->left != 0)
            {
                Node = y->left;
            }
            else
            {
                Node = y->right;
            }
            if (Node != 0)
            {
                Node->parent = y->parent;
            }
            if (y->parent == 0)
            {
                root = Node;
            }
            else if (y == y->parent->left)
            {
                y->parent->left = 0;
            }
            else
            {
                y->parent->right = 0;
            }
            
        }
        else
        {
            while (root!=0)
            {
                del(root);
            }
        }
         

  }
    /*
    ~Tree() {
        Del();
    }*/

};

int main()
{
    setlocale(LC_ALL, "RUS");
    Tree tree;
    char commands[4][20]{
        "arsenal",
    "liverpool",
    "MU",
    "lids united"
    };
    int p1, p2;
    
  
    Elem elem[5];//массив элементов
    
    for (int i = 0; i < 5; i++) {
       elem[i].number = rand() ;
        tree.insert(&elem[i]);
    }
    tree.print(&elem[0]);
    tree.del(&elem[0]);
    for (int i = 4; i >=0; i--)
    {
        tree.del(&elem[i]);
    }
    
    
  
  }